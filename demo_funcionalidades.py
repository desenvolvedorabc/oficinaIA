#!/usr/bin/env python3
"""
Script de Demonstra√ß√£o das Funcionalidades Avan√ßadas do SAEV
Este script mostra como usar os recursos de relat√≥rios e an√°lises do sistema.
"""

import sys
import os
from pathlib import Path

# Adicionar o diret√≥rio raiz ao path para importa√ß√µes
sys.path.append(str(Path(__file__).parent))

from src.config import config
from src.reports.generator import SAEVReports
from src.analytics.advanced import SAEVAnalytics

def print_header(title):
    """Imprime um cabe√ßalho formatado"""
    print("\n" + "="*60)
    print(f"üî¨ {title}")
    print("="*60)

def demonstrate_reports():
    """Demonstra a funcionalidade de relat√≥rios"""
    print_header("DEMONSTRA√á√ÉO DE RELAT√ìRIOS AUTOMATIZADOS")
    
    try:
        # Detectar ambiente e obter caminho do banco
        environment = config.detect_environment()
        db_path = config.get_database_path(environment)
        
        print(f"üìä Usando ambiente: {environment.upper()}")
        print(f"üìÅ Banco de dados: {db_path}")
        
        # Criar inst√¢ncia do gerador de relat√≥rios
        reports = SAEVReports(db_path)
        
        # 1. Relat√≥rio Municipal
        print("\nüèòÔ∏è Gerando Relat√≥rio Municipal...")
        try:
            arquivo_municipal = reports.generate_municipal_report(2023, "Matem√°tica")
            print(f"‚úÖ Relat√≥rio municipal gerado: {arquivo_municipal}")
        except Exception as e:
            print(f"‚ö†Ô∏è Erro ao gerar relat√≥rio municipal: {e}")
        
        # 2. Relat√≥rio de Escolas
        print("\nüè´ Gerando Relat√≥rio de Escolas...")
        try:
            arquivo_escolas = reports.generate_school_report(2023, "Portugu√™s")
            print(f"‚úÖ Relat√≥rio de escolas gerado: {arquivo_escolas}")
        except Exception as e:
            print(f"‚ö†Ô∏è Erro ao gerar relat√≥rio de escolas: {e}")
        
        # 3. Relat√≥rio de Compet√™ncias
        print("\nüéØ Gerando Relat√≥rio de Compet√™ncias...")
        try:
            arquivo_competencias = reports.generate_competency_report(2023, "Matem√°tica")
            print(f"‚úÖ Relat√≥rio de compet√™ncias gerado: {arquivo_competencias}")
        except Exception as e:
            print(f"‚ö†Ô∏è Erro ao gerar relat√≥rio de compet√™ncias: {e}")
        
        print("\nüí° Os relat√≥rios foram salvos na pasta 'reports/' em formato Excel")
        
    except Exception as e:
        print(f"‚ùå Erro geral nos relat√≥rios: {e}")

def demonstrate_analytics():
    """Demonstra as an√°lises estat√≠sticas avan√ßadas"""
    print_header("DEMONSTRA√á√ÉO DE AN√ÅLISES ESTAT√çSTICAS AVAN√áADAS")
    
    try:
        # Detectar ambiente e obter caminho do banco
        environment = config.detect_environment()
        db_path = config.get_database_path(environment)
        
        print(f"üìä Usando ambiente: {environment.upper()}")
        print(f"üìÅ Banco de dados: {db_path}")
        
        # Criar inst√¢ncia do analisador
        analytics = SAEVAnalytics(db_path)
        
        # 1. Clustering de Escolas
        print("\nüî¨ Realizando Clustering de Escolas...")
        try:
            resultado_clustering = analytics.school_clustering(2023, "Matem√°tica")
            if 'error' not in resultado_clustering:
                print(f"‚úÖ Clustering conclu√≠do: {resultado_clustering['n_clusters']} grupos identificados")
                
                # Mostrar nomes dos clusters
                for cluster_id, nome in resultado_clustering['cluster_names'].items():
                    escolas_no_cluster = len(resultado_clustering['data'][
                        resultado_clustering['data']['cluster'] == cluster_id
                    ])
                    print(f"   üìä Grupo {cluster_id + 1}: {nome} ({escolas_no_cluster} escolas)")
            else:
                print(f"‚ö†Ô∏è {resultado_clustering['error']}")
        except Exception as e:
            print(f"‚ö†Ô∏è Erro no clustering: {e}")
        
        # 2. An√°lise de Equidade
        print("\n‚öñÔ∏è Analisando Equidade Educacional...")
        try:
            resultado_equidade = analytics.equity_analysis(2023, "Portugu√™s")
            print(f"‚úÖ An√°lise de equidade conclu√≠da para {len(resultado_equidade)} munic√≠pios")
            
            # Mostrar munic√≠pios com melhor e pior equidade
            melhor_equidade = resultado_equidade.nsmallest(3, 'coef_variacao')
            pior_equidade = resultado_equidade.nlargest(3, 'coef_variacao')
            
            print("\nüèÜ Munic√≠pios com MELHOR equidade (menor varia√ß√£o):")
            for _, row in melhor_equidade.iterrows():
                print(f"   ‚Ä¢ {row['MUN_NOME']}: {row['nivel_equidade']} (CV: {row['coef_variacao']:.1f}%)")
            
            print("\n‚ö†Ô∏è Munic√≠pios que precisam de ATEN√á√ÉO (maior varia√ß√£o):")
            for _, row in pior_equidade.iterrows():
                print(f"   ‚Ä¢ {row['MUN_NOME']}: {row['nivel_equidade']} (CV: {row['coef_variacao']:.1f}%)")
                
        except Exception as e:
            print(f"‚ö†Ô∏è Erro na an√°lise de equidade: {e}")
        
        # 3. An√°lise de Correla√ß√£o entre Compet√™ncias
        print("\nüîó Analisando Correla√ß√µes entre Compet√™ncias...")
        try:
            resultado_correlacao = analytics.competency_correlation_analysis(2023, "Matem√°tica")
            
            print("‚úÖ An√°lise de correla√ß√£o conclu√≠da")
            
            # Mostrar correla√ß√µes mais fortes
            top_correlacoes = resultado_correlacao['top_correlations'].head(3)
            print("\nüîù Compet√™ncias mais correlacionadas:")
            for _, row in top_correlacoes.iterrows():
                print(f"   ‚Ä¢ {row['competencia_1']} ‚Üî {row['competencia_2']}: {row['correlacao']:.3f}")
                
        except Exception as e:
            print(f"‚ö†Ô∏è Erro na an√°lise de correla√ß√£o: {e}")
            
    except Exception as e:
        print(f"‚ùå Erro geral nas an√°lises: {e}")

def show_usage_examples():
    """Mostra exemplos de uso do c√≥digo"""
    print_header("EXEMPLOS DE C√ìDIGO PARA USO PR√ìPRIO")
    
    print("""
üìù Para usar essas funcionalidades em seus pr√≥prios scripts Python:

1Ô∏è‚É£ RELAT√ìRIOS:
   
   from src.reports.generator import SAEVReports
   from src.config import config
   
   # Obter caminho do banco automaticamente
   db_path = config.get_database_path()  # ou especificar: 'teste' ou 'producao'
   
   # Criar gerador de relat√≥rios
   reports = SAEVReports(db_path)
   
   # Gerar relat√≥rio municipal
   arquivo = reports.generate_municipal_report(2023, "Matem√°tica")
   print(f"Relat√≥rio salvo em: {arquivo}")

2Ô∏è‚É£ AN√ÅLISES AVAN√áADAS:
   
   from src.analytics.advanced import SAEVAnalytics
   from src.config import config
   
   # Obter caminho do banco automaticamente
   db_path = config.get_database_path()
   
   # Criar analisador
   analytics = SAEVAnalytics(db_path)
   
   # Fazer clustering de escolas
   resultado = analytics.school_clustering(2023, "Portugu√™s")
   print(f"Identificados {resultado['n_clusters']} grupos de escolas")
   
   # Analisar equidade
   equidade = analytics.equity_analysis(2023, "Matem√°tica")
   print(f"An√°lise de equidade para {len(equidade)} munic√≠pios")

3Ô∏è‚É£ EXECUTAR NO JUPYTER NOTEBOOK:
   
   # Primeiro, adicione o caminho do projeto:
   import sys
   sys.path.append('/caminho/para/oficinaIA')
   
   # Depois use os exemplos acima normalmente

4Ô∏è‚É£ EXECUTAR COMO SCRIPT:
   
   # Salve o c√≥digo em um arquivo .py e execute:
   python meu_script_de_analise.py
    """)

def main():
    """Fun√ß√£o principal"""
    print("üöÄ DEMONSTRA√á√ÉO DAS FUNCIONALIDADES AVAN√áADAS DO SAEV")
    print("Este script demonstra como usar relat√≥rios e an√°lises do sistema")
    
    # Verificar se h√° dados dispon√≠veis
    try:
        environment = config.detect_environment()
        db_path = config.get_database_path(environment)
        
        if not Path(db_path).exists():
            print(f"\n‚ùå Banco de dados n√£o encontrado: {db_path}")
            print("üí° Execute primeiro um script de carga ou use ./iniciar.sh para configurar")
            return
        
        # Verificar se h√° dados na tabela
        import sqlite3
        conn = sqlite3.connect(db_path)
        cursor = conn.execute("SELECT COUNT(*) FROM avaliacao")
        total_records = cursor.fetchone()[0]
        conn.close()
        
        if total_records == 0:
            print(f"\n‚ö†Ô∏è O banco existe mas n√£o tem dados: {db_path}")
            print("üí° Execute um script de carga para importar dados")
            return
        
        print(f"\n‚úÖ Banco encontrado com {total_records:,} registros")
        
    except Exception as e:
        print(f"\n‚ùå Erro ao verificar dados: {e}")
        return
    
    # Menu de op√ß√µes
    while True:
        print("\n" + "="*60)
        print("üìã MENU DE DEMONSTRA√á√ïES:")
        print("1Ô∏è‚É£  Demonstrar Relat√≥rios Automatizados")
        print("2Ô∏è‚É£  Demonstrar An√°lises Estat√≠sticas")
        print("3Ô∏è‚É£  Mostrar Exemplos de C√≥digo")
        print("4Ô∏è‚É£  Executar Tudo")
        print("5Ô∏è‚É£  Sair")
        print("="*60)
        
        opcao = input("\nüéØ Escolha uma op√ß√£o (1-5): ").strip()
        
        if opcao == "1":
            demonstrate_reports()
        elif opcao == "2":
            demonstrate_analytics()
        elif opcao == "3":
            show_usage_examples()
        elif opcao == "4":
            demonstrate_reports()
            demonstrate_analytics()
            show_usage_examples()
        elif opcao == "5":
            print("\nüëã Demonstra√ß√£o finalizada!")
            break
        else:
            print(f"\n‚ùå Op√ß√£o inv√°lida: {opcao}")

if __name__ == "__main__":
    main()

#!/usr/bin/env python3
"""
Exemplo Simples - Como usar Relat√≥rios e An√°lises do SAEV
"""

import sys
from pathlib import Path

# Adicionar o diret√≥rio raiz ao path
sys.path.append(str(Path(__file__).parent))

def exemplo_relatorios():
    """Exemplo de como gerar relat√≥rios"""
    print("üìã EXEMPLO: Gerando Relat√≥rios")
    print("="*40)
    
    try:
        # Importar o que precisamos
        from src.reports.generator import SAEVReports
        from src.config import config
        
        # 1. Forma mais simples (detec√ß√£o autom√°tica do banco)
        print("1Ô∏è‚É£ Usando detec√ß√£o autom√°tica:")
        reports = SAEVReports()  # Sem par√¢metros = detec√ß√£o autom√°tica
        
        # 2. Forma espec√≠fica (escolhendo o ambiente)
        print("2Ô∏è‚É£ Usando ambiente espec√≠fico:")
        db_path_teste = config.get_database_path('teste')
        reports_teste = SAEVReports(db_path_teste)
        
        # 3. Gerar um relat√≥rio de exemplo
        print("3Ô∏è‚É£ Gerando relat√≥rio municipal...")
        arquivo = reports.generate_municipal_report(2023, "Matem√°tica")
        print(f"‚úÖ Relat√≥rio salvo em: {arquivo}")
        
    except Exception as e:
        print(f"‚ùå Erro: {e}")
        print("üí° Certifique-se de que h√° dados no banco")

def exemplo_analytics():
    """Exemplo de como fazer an√°lises"""
    print("\nüî¨ EXEMPLO: Fazendo An√°lises Estat√≠sticas")
    print("="*45)
    
    try:
        # Importar o que precisamos
        from src.analytics.advanced import SAEVAnalytics
        from src.config import config
        
        # 1. Forma mais simples (detec√ß√£o autom√°tica)
        print("1Ô∏è‚É£ Usando detec√ß√£o autom√°tica:")
        analytics = SAEVAnalytics()  # Sem par√¢metros = detec√ß√£o autom√°tica
        
        # 2. Fazer clustering de escolas
        print("2Ô∏è‚É£ Fazendo clustering de escolas...")
        resultado = analytics.school_clustering(2023, "Matem√°tica")
        
        if 'error' not in resultado:
            print(f"‚úÖ Identificados {resultado['n_clusters']} grupos de escolas")
            print("üìä Grupos encontrados:")
            for cluster_id, nome in resultado['cluster_names'].items():
                print(f"   ‚Ä¢ Grupo {cluster_id + 1}: {nome}")
        else:
            print(f"‚ö†Ô∏è {resultado['error']}")
        
    except Exception as e:
        print(f"‚ùå Erro: {e}")
        print("üí° Certifique-se de que h√° dados suficientes no banco")

def mostrar_codigo():
    """Mostra o c√≥digo que voc√™ pode usar"""
    print("\nüíª C√ìDIGO PARA VOC√ä USAR:")
    print("="*30)
    
    codigo = '''
# RELAT√ìRIOS - Copie e cole este c√≥digo:

from src.reports.generator import SAEVReports

# M√©todo 1: Detec√ß√£o autom√°tica (mais f√°cil)
reports = SAEVReports()
arquivo = reports.generate_municipal_report(2023, "Matem√°tica")
print(f"Relat√≥rio: {arquivo}")

# M√©todo 2: Especificando o banco
from src.config import config
db_path = config.get_database_path('teste')  # ou 'producao'
reports = SAEVReports(db_path)

# AN√ÅLISES - Copie e cole este c√≥digo:

from src.analytics.advanced import SAEVAnalytics

# M√©todo 1: Detec√ß√£o autom√°tica (mais f√°cil)
analytics = SAEVAnalytics()
resultado = analytics.school_clustering(2023, "Portugu√™s")
print(f"Grupos: {resultado['n_clusters']}")

# M√©todo 2: Especificando o banco
analytics = SAEVAnalytics(db_path)
equidade = analytics.equity_analysis(2023, "Matem√°tica")
print(f"Munic√≠pios analisados: {len(equidade)}")
    '''
    
    print(codigo)

if __name__ == "__main__":
    print("üöÄ EXEMPLOS PR√ÅTICOS - Relat√≥rios e An√°lises SAEV")
    print("Este script mostra como usar as funcionalidades avan√ßadas")
    
    # Verificar se h√° dados
    try:
        from src.config import config
        import sqlite3
        
        db_path = config.get_database_path()
        
        if not Path(db_path).exists():
            print(f"\n‚ùå Banco n√£o encontrado: {db_path}")
            print("üí° Execute: ./iniciar.sh e configure um ambiente")
            sys.exit(1)
        
        conn = sqlite3.connect(db_path)
        cursor = conn.execute("SELECT COUNT(*) FROM avaliacao")
        total = cursor.fetchone()[0]
        conn.close()
        
        if total == 0:
            print(f"\n‚ö†Ô∏è Banco vazio: {db_path}")
            print("üí° Execute um script de carga para adicionar dados")
            sys.exit(1)
        
        print(f"\n‚úÖ Banco encontrado: {Path(db_path).name} ({total:,} registros)")
        
    except Exception as e:
        print(f"\n‚ùå Erro ao verificar dados: {e}")
        sys.exit(1)
    
    # Executar exemplos
    exemplo_relatorios()
    exemplo_analytics() 
    mostrar_codigo()
    
    print("\nüéâ Exemplos conclu√≠dos!")
    print("üí° Use os c√≥digos acima em seus pr√≥prios scripts Python")


/*
================================================================================
STAR SCHEMA TRANSFORMATION FOR SAEV EDUCATIONAL ASSESSMENT DATA
================================================================================

OBJETIVO:
Transformar a tabela √∫nica 'avaliacao' (resultado do ETL) em um modelo 
Star Schema otimizado para an√°lises de Business Intelligence.

ESTRUTURA CRIADA:
- 3 Tabelas de Dimens√£o: dim_aluno, dim_escola, dim_descritor
- 1 Tabela Fato: fato_resposta_aluno  
- 1 Tabela Auxiliar: teste (vers√£o normalizada da tabela original)

BENEF√çCIOS:
- Consultas mais r√°pidas para dashboards e relat√≥rios
- Modelo otimizado para ferramentas de BI
- Redu√ß√£o de redund√¢ncia de dados
- Facilita an√°lises agregadas e drill-down

AUTOR: SAEV Dashboard Project
DATA: 2025
VERS√ÉO: 1.0
================================================================================
*/

-- ============================================================================
-- ETAPA 1: LIMPEZA DE ESTRUTURAS EXISTENTES
-- ============================================================================
.print "üßπ Removendo tabelas fato e dimens√£o existentes..."

DROP TABLE IF EXISTS dim_aluno;
DROP TABLE IF EXISTS dim_escola; 
DROP TABLE IF EXISTS dim_descritor;
DROP TABLE IF EXISTS teste; 
DROP TABLE IF EXISTS fato_resposta_aluno;

-- Tabelas futuras (comentadas para refer√™ncia)
-- DROP TABLE IF EXISTS resposta_escola;
-- DROP TABLE IF EXISTS resposta_municipio;   

-- ============================================================================
-- ETAPA 2: CRIA√á√ÉO DAS TABELAS DE DIMENS√ÉO
-- ============================================================================
.print "üìä Criando tabelas de dimens√£o..."

-- ----------------------------------------------------------------------------
-- DIMENS√ÉO ALUNO (dim_aluno)
-- Cont√©m dados √∫nicos de cada aluno
-- ----------------------------------------------------------------------------
.print "üë§ Criando dimens√£o de alunos..."
CREATE TABLE dim_aluno (
    ALU_ID INTEGER PRIMARY KEY,    -- Chave prim√°ria - ID √∫nico do aluno
    ALU_NOME VARCHAR(60),          -- Nome do aluno (pode estar criptografado)
    ALU_CPF CHAR(11)               -- CPF do aluno (pode estar criptografado)
);

-- Popula a dimens√£o com alunos √∫nicos
INSERT INTO dim_aluno (ALU_ID, ALU_NOME, ALU_CPF)  
SELECT DISTINCT ALU_ID, ALU_NOME, ALU_CPF 
FROM avaliacao; 

SELECT COUNT(*) FROM dim_aluno;
.print "‚úÖ Dimens√£o aluno criada com sucesso!"

-- ----------------------------------------------------------------------------
-- DIMENS√ÉO ESCOLA (dim_escola)
-- Cont√©m dados √∫nicos de cada escola
-- ----------------------------------------------------------------------------
.print "üè´ Criando dimens√£o de escolas..."
CREATE TABLE dim_escola (
    ESC_INEP CHAR(8) PRIMARY KEY,  -- Chave prim√°ria - C√≥digo INEP da escola
    ESC_NOME VARCHAR(60)           -- Nome da escola (pode estar criptografado)
);

-- Popula a dimens√£o com escolas √∫nicas
INSERT INTO dim_escola (ESC_INEP, ESC_NOME) 
SELECT DISTINCT ESC_INEP, ESC_NOME 
FROM avaliacao;

SELECT COUNT(*) FROM dim_escola;
.print "‚úÖ Dimens√£o escola criada com sucesso!"

-- ----------------------------------------------------------------------------
-- DIMENS√ÉO DESCRITOR (dim_descritor)
-- Cont√©m dados √∫nicos de cada descritor/compet√™ncia com estat√≠sticas de uso
-- ----------------------------------------------------------------------------
.print "üéØ Criando dimens√£o de descritores..."
CREATE TABLE dim_descritor (
    MTI_CODIGO VARCHAR(15) PRIMARY KEY,  -- Chave prim√°ria - C√≥digo do descritor
    MTI_DESCRITOR VARCHAR(512),          -- Descri√ß√£o completa do descritor
    QTD INTEGER                          -- Quantidade de quest√µes usando este descritor
); 

-- Popula a dimens√£o com descritores √∫nicos e suas estat√≠sticas
-- Usa MAX() para pegar uma vers√£o da descri√ß√£o quando h√° varia√ß√µes
INSERT INTO dim_descritor (MTI_CODIGO, MTI_DESCRITOR, QTD) 
SELECT 
    MTI_CODIGO, 
    MAX(MTI_DESCRITOR) AS MTI_DESCRITOR,  -- Pega uma vers√£o da descri√ß√£o
    COUNT(*) AS QTD 
FROM avaliacao 
GROUP BY MTI_CODIGO;

SELECT COUNT(*) FROM dim_descritor;
.print "‚úÖ Dimens√£o descritor criada com sucesso!"

-- ============================================================================
-- ETAPA 3: CRIA√á√ÉO DA TABELA AUXILIAR NORMALIZADA
-- ============================================================================
.print "üìã Criando tabela auxiliar 'teste'..."

-- ----------------------------------------------------------------------------
-- TABELA TESTE (auxiliar)
-- Vers√£o normalizada da tabela original sem redund√¢ncias de dimens√µes
-- Mant√©m apenas as chaves estrangeiras para as dimens√µes
-- ----------------------------------------------------------------------------
CREATE TABLE teste (
    MUN_UF         CHAR(2),              -- SIGLA DA UNIDADE DA FEDERA√á√ÉO
    MUN_NOME       VARCHAR(60),          -- NOME DO MUNIC√çPIO
    ESC_INEP       CHAR(8),              -- FK para dim_escola - C√ìDIGO INEP DA ESCOLA
    SER_NUMBER     INTEGER,              -- N√öMERO DO ANO/S√âRIE
    SER_NOME       VARCHAR(30),          -- NOME DA S√âRIE
    TUR_PERIODO    VARCHAR(15),          -- TURNO DE ATIVIDADE (Manh√£, Tarde)
    TUR_NOME       VARCHAR(20),          -- NOME DO TURNO
    ALU_ID         INTEGER,              -- FK para dim_aluno - IDENTIFICA√á√ÉO DO ALUNO
    ALU_CPF        VARCHAR(15),          -- CPF DO ALUNO (redundante, para compatibilidade)
    AVA_NOME       VARCHAR(50),          -- NOME DA AVALIA√á√ÉO
    AVA_ANO        INTEGER,              -- ANO DA AVALIA√á√ÉO
    DIS_NOME       VARCHAR(30),          -- NOME DA DISCIPLINA
    TES_NOME       VARCHAR(30),          -- NOME DO TESTE
    TEG_ORDEM      INTEGER,              -- ORDEM DA QUEST√ÉO DO TESTE
    ATR_RESPOSTA   CHAR(1),              -- RESPOSTA DO ALUNO NA QUEST√ÉO
    ATR_CERTO      INTEGER,              -- SE 1 ACERTOU, SE 0 ERROU
    MTI_CODIGO     VARCHAR(15)           -- FK para dim_descritor - C√ìDIGO DO DESCRITOR
);

-- Popula a tabela teste com dados normalizados (sem nomes de dimens√µes)
INSERT INTO teste (
    MUN_UF, MUN_NOME, ESC_INEP, SER_NUMBER, SER_NOME, TUR_PERIODO, TUR_NOME, 
    ALU_ID, ALU_CPF, AVA_NOME, AVA_ANO, DIS_NOME, TES_NOME, TEG_ORDEM, 
    ATR_RESPOSTA, ATR_CERTO, MTI_CODIGO
)
SELECT 
    MUN_UF, MUN_NOME, ESC_INEP, SER_NUMBER, SER_NOME, TUR_PERIODO, TUR_NOME, 
    ALU_ID, ALU_CPF, AVA_NOME, AVA_ANO, DIS_NOME, TES_NOME, TEG_ORDEM, 
    ATR_RESPOSTA, ATR_CERTO, MTI_CODIGO  
FROM avaliacao;

SELECT COUNT(*) FROM teste;
.print "‚úÖ Tabela 'teste' (vers√£o otimizada da fonte) criada e populada!"

-- ============================================================================
-- ETAPA 4: CRIA√á√ÉO DA TABELA FATO
-- ============================================================================
.print "‚≠ê Criando tabela fato principal..."

-- ----------------------------------------------------------------------------
-- TABELA FATO: fato_resposta_aluno
-- Agrega√ß√£o por aluno, descritor e contexto, com m√©tricas de acerto/erro
-- √â o cora√ß√£o do Star Schema - onde ficam as m√©tricas de neg√≥cio
-- ----------------------------------------------------------------------------
CREATE TABLE fato_resposta_aluno AS 
SELECT 
    -- Dimens√µes geogr√°ficas e administrativas
    MUN_UF,           -- Unidade da Federa√ß√£o
    MUN_NOME,         -- Nome do Munic√≠pio
    ESC_INEP,         -- C√≥digo da Escola (FK para dim_escola)
    
    -- Dimens√µes educacionais
    SER_NUMBER,       -- N√∫mero da S√©rie
    SER_NOME,         -- Nome da S√©rie
    TUR_PERIODO,      -- Per√≠odo do Turno
    TUR_NOME,         -- Nome do Turno
    
    -- Dimens√£o do aluno
    ALU_ID,           -- ID do Aluno (FK para dim_aluno)
    
    -- Dimens√µes de avalia√ß√£o
    AVA_NOME,         -- Nome da Avalia√ß√£o
    AVA_ANO,          -- Ano da Avalia√ß√£o
    DIS_NOME,         -- Disciplina
    TES_NOME,         -- Nome do Teste
    MTI_CODIGO,       -- C√≥digo do Descritor (FK para dim_descritor)
    
    -- M√âTRICAS DE NEG√ìCIO (Fatos)
    SUM(CASE WHEN ATR_CERTO = 1 THEN 1 ELSE 0 END) AS ACERTO,  -- Total de acertos
    SUM(CASE WHEN ATR_CERTO = 0 THEN 1 ELSE 0 END) AS ERRO     -- Total de erros
FROM teste
GROUP BY 
    MUN_UF, MUN_NOME, ESC_INEP, SER_NUMBER, SER_NOME, 
    TUR_PERIODO, TUR_NOME, ALU_ID, AVA_NOME, AVA_ANO, 
    DIS_NOME, TES_NOME, MTI_CODIGO;

create index idx_fato_resposta_aluno ON fato_resposta_aluno (AVA_ANO,MUN_UF, MUN_NOME, ESC_INEP, DIS_NOME);

.print "üìä Tabela fato_resposta_aluno criada com agrega√ß√µes de m√©tricas!"


SELECT COUNT(*) FROM fato_resposta_aluno;
.print "‚úÖ Tabela fato_resposta_aluno criada e populada com sucesso!"

-- ============================================================================
-- ETAPA 5: OTIMIZA√á√ÉO FINAL
-- ============================================================================
.print "üöÄ Finalizando otimiza√ß√£o..."

-- Comentado para preservar dados originais durante desenvolvimento
DROP TABLE avaliacao;

.print "üéâ Otimiza√ß√£o de tabelas conclu√≠da - STAR SCHEMA criado com sucesso!"
.print ""
.print "üìä ESTRUTURA FINAL DO STAR SCHEMA:"
.print "   - dim_aluno:           Dimens√£o de alunos √∫nicos"
.print "   - dim_escola:          Dimens√£o de escolas √∫nicas"  
.print "   - dim_descritor:       Dimens√£o de descritores com estat√≠sticas"
.print "   - fato_resposta_aluno: Tabela fato com m√©tricas agregadas"
.print "   - teste:               Tabela auxiliar normalizada"
.print ""
.print "‚ú® Pronto para an√°lises de BI de alta performance!"

-- Compacta o banco de dados removendo espa√ßos n√£o utilizados
VACUUM;
